✔ Blog list @done (2019-8-2 22:52:30)
    ✘ Reducer @cancelled (2019-8-2 22:51:57)
        ✘ isErrorMessage ili errorMessage @cancelled (2019-8-2 22:51:56)
        ✔ ovdje nema potrebe za 404. @done (2019-7-15 23:39:17)
    ✔ Reorganizirati, tako da budu skupa Blog List reduceri i action creatori. Da li i Blog List komponenta budu s njima skupa? @done (2019-7-10 23:20:00)
    ✔ Napisati action creatore @done (2019-7-10 23:20:01)
☐ top level reducer
    ✔ uzeti blog list reducer @done (2019-7-15 23:39:10)
    ☐ normalize? ako da, to se radi u action creatoru.
✔ configureStore @done (2019-8-2 22:51:51)
    ✔ middleware: thunk, logger. @done (2019-7-10 23:20:12)
    ✔ history middleware, za što on služi? @done (2019-8-2 22:51:49)
        ✔ Pamti sve rute na kojima si bio. @done (2019-8-2 22:51:49)
✔ Provider @done (2019-7-10 23:20:15)
✔ BlogList komponenta @done (2019-7-15 23:39:04)
    ✔ Složiti connect(...)(BlogList) @done (2019-7-10 23:20:16)
    ✔ Da li da rastavim Blog List na container i presentation komponentu? @done (2019-7-11 23:30:43)
    ✔ Dodati spinner @done (2019-7-11 23:31:57)
    ✔ Povući podatke u componentDidMount @done (2019-7-11 23:31:58)
    ✔ Prezentirati podatke. @done (2019-7-11 23:31:59)
✔ BlogPostData/BlogPost komponente @done (2019-7-18 23:47:53)
    ✔ Linkati autora. @done (2019-7-18 23:47:53)
    ✔ Napraviti Back gumb, natrag na summaries. Vidjeti da li puca? @done (2019-7-13 18:29:53)
    ✔ blogPost.comments -> ovakvu strukturu dobivam sa backenda. Ja ju samo oponašam na front endu u initial state-u, ali u suštini svaka promjena na API modelu će se odmah reflektirati na moj state. Možda bih trebao razdvojiti reducere da ovo shendlam na održiviji način? @done (2019-7-15 23:38:46)
        ✔ Reduceri razdvojeni. Također su i container componente razdvojene (blog post i blog post comments). @done (2019-7-15 23:38:45)
✔ Bug: go to /, go to blog post, fetch comments, go back to /, go to another blog post - previous post's comments are loaded. @done (2019-7-23 22:55:15)
    ✔ Solution: componentWillUpdate() -> reset blog post comments state. @done (2019-7-23 22:55:15)
✔ Author: @done (2019-7-24 00:37:14)
    ✔ AuthorData.jsx @done (2019-7-24 00:37:13)
    ✔ Author.jsx @done (2019-7-24 00:37:14)
    ✔ Route @done (2019-7-18 23:59:32)
    ✔ Link to author @done (2019-7-18 23:59:31)
                                         ✔ Db: Link comments to blog posts @done (2019-7-14 16:53:53)
✔ API: /comments/ @done (2019-7-15 23:38:10)
    ✔ /api/BlogPostComment/${blogPostId} nije ok. {blogPostId} nije identifikator commenta nego filter, pa treba biti kao querystring. @done (2019-7-15 23:38:09)
✔ "Back" links @done (2019-8-2 22:51:32)
    ✔ Case: blog summaries -> blog -> comments -> author -> back -> you end up on blog summaries, not on author. Try to find a way to get back where you were. Routing and History? @done (2019-8-2 22:51:32)
        ✔ Test this. @done (2019-8-2 22:51:31)
✔ Clean up various unused things. Look at compile warnings in browser console. @done (2019-8-2 22:51:33)
☐ Potencijalan case: enable logging na Identity Db Contextu i vidi da li se već authenticated user povlači pri svakom requestu iz baze? Kako se onda claimovi u cookieju refreshaju? Kako uopće izgleda i inicijalna autentifikacija usera?
☐ Postman request:HTTPS se ne validira?
☐ Kad se sjebe neki request i pukne HttpError na klijentu, i onda odem na "Back", i dalje traje error. Nije da se izvršava React ruta.
✔ [ValidateAntiforgeryToken] na sve POST/PUT/DELETE actione. @done (2019-10-9 22:22:16)
☐ CRUD comments.
☐ Delete blog post redirecta na "/", a trebao bi na zadnju lokaciju u historyju.
☐ Paging
✔ File naming. @done (2019-9-27 22:58:53)
    ✔ All JS files should be camelCase. @done (2019-9-27 22:58:54)
    ✔ All React files should be PascalCase. @done (2019-9-27 22:58:55)
✔ Database migration @done (2019-8-3 11:56:08)
    ✔ MySql @done (2019-8-3 11:56:06)
    ✔ Enable sensitive logging only during development. @done (2019-8-3 11:56:07)
☐ Authentication
    ✔ API @done (2019-8-25 20:59:16)
    ✔ Redux reducer @done (2019-8-25 20:59:17)
    ✔ React components @done (2019-8-25 20:59:17)
    ☐ Forgot password
    ☐ Two factor authentication
    ☐ Lockout
☐ Authorization
    ✔ Claims @done (2019-10-9 22:24:07)
        ✔ Type: "Author", "Admin" @done (2019-10-9 22:24:06)
    ✔ Policy: "AuthorType", "AdminType" @done (2019-10-9 22:24:06)
    ✔ How to authorize based on claims? @done (2019-9-4 23:08:50)
        ✔ [Authorize(Policy("AuthorType"))] @done (2019-9-4 23:08:49)
✘ Turn all authors into identity users. @cancelled (2019-9-4 23:08:54)
    ✘ Find a way to map identity users onto authors. AutoMapper? @cancelled (2019-9-4 23:08:54)
✔ Edit blog posts @done (2019-9-4 22:08:02)
    ✔ Create entry fields when authenticated. @done (2019-9-4 22:08:01)
☐ If you try to post/put while w/o cookie, you will get a 401 back. This causes HttpError to be thrown by your api.js, but this is never caught. Fix this by presenting a pleasant message.
✘ Često moramo ručno vaditi logiranog usera i njegov Id. Možemo to nekako preko Model Bindinga automatizirati? @cancelled (2019-10-9 22:24:24)
☐ Security
    ✔ HTTPS @done (2019-8-5 14:08:18)
    ✔ DPAPI, encryption @done (20. 10. 2019. 09:48:13)
    ☐ HSTS
        ✘ Preload HSTS @cancelled (20. 10. 2019. 21:17:16)
    ✔ XSRF @done (2019-10-9 22:24:38)
        ✔ This is a cookie exploit. @done (2019-10-9 22:24:39)
        ✔ After establishing login and authentication, see if it is a factor in React-WebAPI communication. @done (2019-10-9 22:24:39)
    ☐ XSS
        ✔ Sanitize outputs that originally came from the front-end - React does it itself to a certain extent. @done (20. 10. 2019. 11:47:14)
        ☐ react-sanitized-html
        ✔ Sanitize inputs like names etc... - strip HTML using HtmlSanitizer package for .NET @done (20. 10. 2019. 11:47:21)
    ✔ Content-Security-Policy @done (19. 10. 2019. 18:07:55)
    ☐ Content-Security Policy and React
        ☐ Requires a more in-depth knowledge of React. Consult https://medium.com/@nrshahri/csp-cra-324dd83fe5ff.
    ✔ Click jacking - Xfo @done (19. 10. 2019. 19:06:05)
    ✔ CORS @done (20. 10. 2019. 22:53:16)
    ☐ npm security
✔ Database connection string password - place in user secret store. Explore other possibilities. @done (20. 10. 2019. 11:49:03)
    ✔ %APPDATA%\Microsoft\UserSecrets\<user_secrets_id>\secrets.json @done (20. 10. 2019. 11:49:00)
    ✔ Add <UserSecretsId> to .csproj @done (20. 10. 2019. 11:48:59)
☐ Deployment
    ☐ Try out production React
    ☐ Try out production ASP.NET Core
☐ View Model vs dedicated Request/Response entities.
☐ VPN
☐ Chocolatey